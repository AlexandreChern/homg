{"name":"Homg","tagline":"High-order Geometric Multigrid using Hexahedral Finite Elements","body":"# HoMG\r\n\r\n![mesh](https://raw.github.com/hsundar/homg/gh-pages/images/warped%20mesh.png)\r\n\r\nHigh-order finite-element package using hexahedral elements. The code is a\r\ntestbed for geometric multigrid approaches for high order discretizations. The\r\ncurrent implementation supports setting up a combination of $h$ and $p$\r\nheirarchy. The following smoothers are supported,\r\n * Jacobi\r\n * Chebyshev-accelerated Jacobi\r\n * block Jacobi\r\n * Symmetric SOR \r\n\r\n\r\n### Basic Usage\r\n\r\nA simple example in 2D\r\n```\r\n#!matlab\r\n\r\n% specify the coefficients\r\nmu = @(x,y)(1 + 1e6*( cos(2*pi*x)^2 + cos(2*pi*y)^2 ) );\r\n\r\n% create the mesh heirarchy, for a warped mesh\r\n% in this case we create a h+p heirarchy\r\n%     grid 4 --> 32x32, p=4  (finest)\r\n%     grid 3 --> 32x32, p=2      \r\n%     grid 2 --> 32x32, p=1\r\n%     grid 1 --> 16x16, p=1\r\n%     grid 0 -->  8x8,  p=1  (coarsest)\r\n\r\ng = create_hexmesh_grids(2, mu, @homg.xform.shell, [1 2 4], [8 16 32]);\r\n\r\n% now solve using multigrid as the solver and the choice of smoother\r\ng.solve (150, 'jacobi', 3,3, g.L, g.get_u0);\r\ng.solve (150, 'chebyshev', 3,3, g.L, g.get_u0);\r\ng.solve (150, 'ssor', 2,1, g.L, g.get_u0);\r\n\r\n% or solve using CG preconditioned using multigrid\r\ng.solve_pcg(150, 'jacobi', 3,3, g.L, g.get_u0);\r\ng.solve_pcg(150, 'chebyshev', 3,3, g.L, g.get_u0);\r\ng.solve_pcg(150, 'ssor', 2,1, g.L, g.get_u0);\r\n\r\n```\r\nThe 3D example is similar with a few changes in the grid setup.\r\n\r\n```\r\n#!matlab\r\n\r\n% specify the coefficients\r\nmu = @(x,y,z)(1 + 10^6*( cos(2*pi*x)^2 + cos(2*pi*y)^2 + cos(2*pi*z)^2) );\r\n\r\n% create the mesh heirarchy, for a warped mesh\r\n% in this case we create a h+p heirarchy\r\n%     grid 4 --> 8x8x8, p=4  (finest)\r\n%     grid 3 --> 8x8x8, p=2      \r\n%     grid 2 --> 8x8x8, p=1\r\n%     grid 1 --> 4x4x4, p=1\r\n%     grid 0 --> 2x2x2, p=1  (coarsest)\r\n\r\ng = create_hexmesh_grids(3, mu, @homg.xform.shell, [1 2 4], [2 4 8]);\r\n\r\n% now solve using multigrid as the solver and the choice of smoother\r\ng.solve (150, 'jacobi', 3,3, g.L, g.get_u0);\r\ng.solve (150, 'chebyshev', 3,3, g.L, g.get_u0);\r\ng.solve (150, 'ssor', 2,1, g.L, g.get_u0);\r\n\r\n% or solve using CG preconditioned using multigrid\r\ng.solve_pcg(150, 'jacobi', 3,3, g.L, g.get_u0);\r\ng.solve_pcg(150, 'chebyshev', 3,3, g.L, g.get_u0);\r\ng.solve_pcg(150, 'ssor', 2,1, g.L, g.get_u0);\r\n\r\n```\r\n\r\n### Authors and Contributors\r\nHari Sundar (@hsundar) and Georg Stadler.\r\n\r\n### Support or Contact\r\nEmail questions or suggestions to hari@ices.utexas.edu \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}